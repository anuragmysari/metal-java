/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * InstancesBatchCreateInputBatchesInnerIpAddressesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstancesBatchCreateInputBatchesInnerIpAddressesInner {
  /**
   * Address Family for IP Address
   */
  @JsonAdapter(AddressFamilyEnum.Adapter.class)
  public enum AddressFamilyEnum {
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_6(new BigDecimal("6"));

    private BigDecimal value;

    AddressFamilyEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressFamilyEnum fromValue(BigDecimal value) {
      for (AddressFamilyEnum b : AddressFamilyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressFamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressFamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressFamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressFamilyEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_FAMILY = "address_family";
  @SerializedName(SERIALIZED_NAME_ADDRESS_FAMILY)
  private AddressFamilyEnum addressFamily;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private BigDecimal cidr;

  public static final String SERIALIZED_NAME_IP_RESERVATIONS = "ip_reservations";
  @SerializedName(SERIALIZED_NAME_IP_RESERVATIONS)
  private List<String> ipReservations = null;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public = true;

  public InstancesBatchCreateInputBatchesInnerIpAddressesInner() {
  }

  public InstancesBatchCreateInputBatchesInnerIpAddressesInner addressFamily(AddressFamilyEnum addressFamily) {
    
    this.addressFamily = addressFamily;
    return this;
  }

   /**
   * Address Family for IP Address
   * @return addressFamily
  **/
  @javax.annotation.Nullable

  public AddressFamilyEnum getAddressFamily() {
    return addressFamily;
  }


  public void setAddressFamily(AddressFamilyEnum addressFamily) {
    this.addressFamily = addressFamily;
  }


  public InstancesBatchCreateInputBatchesInnerIpAddressesInner cidr(BigDecimal cidr) {
    
    this.cidr = cidr;
    return this;
  }

   /**
   * Cidr Size for the IP Block created. Valid values depends on the operating system been provisioned (28..32 for IPv4 addresses, 124..127 for IPv6 addresses).
   * @return cidr
  **/
  @javax.annotation.Nullable

  public BigDecimal getCidr() {
    return cidr;
  }


  public void setCidr(BigDecimal cidr) {
    this.cidr = cidr;
  }


  public InstancesBatchCreateInputBatchesInnerIpAddressesInner ipReservations(List<String> ipReservations) {
    
    this.ipReservations = ipReservations;
    return this;
  }

  public InstancesBatchCreateInputBatchesInnerIpAddressesInner addIpReservationsItem(String ipReservationsItem) {
    if (this.ipReservations == null) {
      this.ipReservations = new ArrayList<>();
    }
    this.ipReservations.add(ipReservationsItem);
    return this;
  }

   /**
   * UUIDs of any IP reservations to use when assigning IPs
   * @return ipReservations
  **/
  @javax.annotation.Nullable

  public List<String> getIpReservations() {
    return ipReservations;
  }


  public void setIpReservations(List<String> ipReservations) {
    this.ipReservations = ipReservations;
  }


  public InstancesBatchCreateInputBatchesInnerIpAddressesInner _public(Boolean _public) {
    
    this._public = _public;
    return this;
  }

   /**
   * Address Type for IP Address
   * @return _public
  **/
  @javax.annotation.Nullable

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    this._public = _public;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InstancesBatchCreateInputBatchesInnerIpAddressesInner instance itself
   */
  public InstancesBatchCreateInputBatchesInnerIpAddressesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesBatchCreateInputBatchesInnerIpAddressesInner instancesBatchCreateInputBatchesInnerIpAddressesInner = (InstancesBatchCreateInputBatchesInnerIpAddressesInner) o;
    return Objects.equals(this.addressFamily, instancesBatchCreateInputBatchesInnerIpAddressesInner.addressFamily) &&
        Objects.equals(this.cidr, instancesBatchCreateInputBatchesInnerIpAddressesInner.cidr) &&
        Objects.equals(this.ipReservations, instancesBatchCreateInputBatchesInnerIpAddressesInner.ipReservations) &&
        Objects.equals(this._public, instancesBatchCreateInputBatchesInnerIpAddressesInner._public)&&
        Objects.equals(this.additionalProperties, instancesBatchCreateInputBatchesInnerIpAddressesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressFamily, cidr, ipReservations, _public, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesBatchCreateInputBatchesInnerIpAddressesInner {\n");
    sb.append("    addressFamily: ").append(toIndentedString(addressFamily)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    ipReservations: ").append(toIndentedString(ipReservations)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_family");
    openapiFields.add("cidr");
    openapiFields.add("ip_reservations");
    openapiFields.add("public");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstancesBatchCreateInputBatchesInnerIpAddressesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstancesBatchCreateInputBatchesInnerIpAddressesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesBatchCreateInputBatchesInnerIpAddressesInner is not found in the empty JSON string", InstancesBatchCreateInputBatchesInnerIpAddressesInner.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ip_reservations") != null && !jsonObj.get("ip_reservations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_reservations` to be an array in the JSON string but got `%s`", jsonObj.get("ip_reservations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesBatchCreateInputBatchesInnerIpAddressesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesBatchCreateInputBatchesInnerIpAddressesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesBatchCreateInputBatchesInnerIpAddressesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesBatchCreateInputBatchesInnerIpAddressesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesBatchCreateInputBatchesInnerIpAddressesInner>() {
           @Override
           public void write(JsonWriter out, InstancesBatchCreateInputBatchesInnerIpAddressesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesBatchCreateInputBatchesInnerIpAddressesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InstancesBatchCreateInputBatchesInnerIpAddressesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstancesBatchCreateInputBatchesInnerIpAddressesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstancesBatchCreateInputBatchesInnerIpAddressesInner
  * @throws IOException if the JSON string is invalid with respect to InstancesBatchCreateInputBatchesInnerIpAddressesInner
  */
  public static InstancesBatchCreateInputBatchesInnerIpAddressesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesBatchCreateInputBatchesInnerIpAddressesInner.class);
  }

 /**
  * Convert an instance of InstancesBatchCreateInputBatchesInnerIpAddressesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

