/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.InstancesBatchCreateInputBatchesInnerIpAddressesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * InstancesBatchCreateInputBatchesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstancesBatchCreateInputBatchesInner {
  public static final String SERIALIZED_NAME_ALWAYS_PXE = "always_pxe";
  @SerializedName(SERIALIZED_NAME_ALWAYS_PXE)
  private Boolean alwaysPxe;

  public static final String SERIALIZED_NAME_BILLING_CYCLE = "billing_cycle";
  @SerializedName(SERIALIZED_NAME_BILLING_CYCLE)
  private String billingCycle;

  public static final String SERIALIZED_NAME_CUSTOMDATA = "customdata";
  @SerializedName(SERIALIZED_NAME_CUSTOMDATA)
  private Object customdata;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FACILITY = "facility";
  @SerializedName(SERIALIZED_NAME_FACILITY)
  private List<String> facility = null;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features = null;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_HOSTNAMES = "hostnames";
  @SerializedName(SERIALIZED_NAME_HOSTNAMES)
  private List<String> hostnames = null;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ip_addresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<InstancesBatchCreateInputBatchesInnerIpAddressesInner> ipAddresses = null;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_METRO = "metro";
  @SerializedName(SERIALIZED_NAME_METRO)
  private String metro;

  public static final String SERIALIZED_NAME_NO_SSH_KEYS = "no_ssh_keys";
  @SerializedName(SERIALIZED_NAME_NO_SSH_KEYS)
  private Boolean noSshKeys;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PROJECT_SSH_KEYS = "project_ssh_keys";
  @SerializedName(SERIALIZED_NAME_PROJECT_SSH_KEYS)
  private List<UUID> projectSshKeys = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TERMINATION_TIME = "termination_time";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TIME)
  private OffsetDateTime terminationTime;

  public static final String SERIALIZED_NAME_USER_SSH_KEYS = "user_ssh_keys";
  @SerializedName(SERIALIZED_NAME_USER_SSH_KEYS)
  private List<UUID> userSshKeys = null;

  public static final String SERIALIZED_NAME_USERDATA = "userdata";
  @SerializedName(SERIALIZED_NAME_USERDATA)
  private String userdata;

  public InstancesBatchCreateInputBatchesInner() {
  }

  public InstancesBatchCreateInputBatchesInner alwaysPxe(Boolean alwaysPxe) {
    
    this.alwaysPxe = alwaysPxe;
    return this;
  }

   /**
   * Get alwaysPxe
   * @return alwaysPxe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAlwaysPxe() {
    return alwaysPxe;
  }


  public void setAlwaysPxe(Boolean alwaysPxe) {
    this.alwaysPxe = alwaysPxe;
  }


  public InstancesBatchCreateInputBatchesInner billingCycle(String billingCycle) {
    
    this.billingCycle = billingCycle;
    return this;
  }

   /**
   * Get billingCycle
   * @return billingCycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBillingCycle() {
    return billingCycle;
  }


  public void setBillingCycle(String billingCycle) {
    this.billingCycle = billingCycle;
  }


  public InstancesBatchCreateInputBatchesInner customdata(Object customdata) {
    
    this.customdata = customdata;
    return this;
  }

   /**
   * Get customdata
   * @return customdata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCustomdata() {
    return customdata;
  }


  public void setCustomdata(Object customdata) {
    this.customdata = customdata;
  }


  public InstancesBatchCreateInputBatchesInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public InstancesBatchCreateInputBatchesInner facility(List<String> facility) {
    
    this.facility = facility;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addFacilityItem(String facilityItem) {
    if (this.facility == null) {
      this.facility = new ArrayList<>();
    }
    this.facility.add(facilityItem);
    return this;
  }

   /**
   * Array of facility codes the batch can use for provisioning. This param also takes a string if you want the batch to be fulfilled in only one facility. Cannot be set if the metro is already set.
   * @return facility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of facility codes the batch can use for provisioning. This param also takes a string if you want the batch to be fulfilled in only one facility. Cannot be set if the metro is already set.")

  public List<String> getFacility() {
    return facility;
  }


  public void setFacility(List<String> facility) {
    this.facility = facility;
  }


  public InstancesBatchCreateInputBatchesInner features(List<String> features) {
    
    this.features = features;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getFeatures() {
    return features;
  }


  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public InstancesBatchCreateInputBatchesInner hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public InstancesBatchCreateInputBatchesInner hostnames(List<String> hostnames) {
    
    this.hostnames = hostnames;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addHostnamesItem(String hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

   /**
   * Get hostnames
   * @return hostnames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getHostnames() {
    return hostnames;
  }


  public void setHostnames(List<String> hostnames) {
    this.hostnames = hostnames;
  }


  public InstancesBatchCreateInputBatchesInner ipAddresses(List<InstancesBatchCreateInputBatchesInnerIpAddressesInner> ipAddresses) {
    
    this.ipAddresses = ipAddresses;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addIpAddressesItem(InstancesBatchCreateInputBatchesInnerIpAddressesInner ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * Get ipAddresses
   * @return ipAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InstancesBatchCreateInputBatchesInnerIpAddressesInner> getIpAddresses() {
    return ipAddresses;
  }


  public void setIpAddresses(List<InstancesBatchCreateInputBatchesInnerIpAddressesInner> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public InstancesBatchCreateInputBatchesInner locked(Boolean locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public InstancesBatchCreateInputBatchesInner metro(String metro) {
    
    this.metro = metro;
    return this;
  }

   /**
   * The metro ID or code the batch can use for provisioning. Cannot be set if the facility is already set.
   * @return metro
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metro ID or code the batch can use for provisioning. Cannot be set if the facility is already set.")

  public String getMetro() {
    return metro;
  }


  public void setMetro(String metro) {
    this.metro = metro;
  }


  public InstancesBatchCreateInputBatchesInner noSshKeys(Boolean noSshKeys) {
    
    this.noSshKeys = noSshKeys;
    return this;
  }

   /**
   * Get noSshKeys
   * @return noSshKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNoSshKeys() {
    return noSshKeys;
  }


  public void setNoSshKeys(Boolean noSshKeys) {
    this.noSshKeys = noSshKeys;
  }


  public InstancesBatchCreateInputBatchesInner operatingSystem(String operatingSystem) {
    
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * Get operatingSystem
   * @return operatingSystem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOperatingSystem() {
    return operatingSystem;
  }


  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public InstancesBatchCreateInputBatchesInner plan(String plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlan() {
    return plan;
  }


  public void setPlan(String plan) {
    this.plan = plan;
  }


  public InstancesBatchCreateInputBatchesInner projectSshKeys(List<UUID> projectSshKeys) {
    
    this.projectSshKeys = projectSshKeys;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addProjectSshKeysItem(UUID projectSshKeysItem) {
    if (this.projectSshKeys == null) {
      this.projectSshKeys = new ArrayList<>();
    }
    this.projectSshKeys.add(projectSshKeysItem);
    return this;
  }

   /**
   * Get projectSshKeys
   * @return projectSshKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<UUID> getProjectSshKeys() {
    return projectSshKeys;
  }


  public void setProjectSshKeys(List<UUID> projectSshKeys) {
    this.projectSshKeys = projectSshKeys;
  }


  public InstancesBatchCreateInputBatchesInner tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public InstancesBatchCreateInputBatchesInner terminationTime(OffsetDateTime terminationTime) {
    
    this.terminationTime = terminationTime;
    return this;
  }

   /**
   * Get terminationTime
   * @return terminationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTerminationTime() {
    return terminationTime;
  }


  public void setTerminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
  }


  public InstancesBatchCreateInputBatchesInner userSshKeys(List<UUID> userSshKeys) {
    
    this.userSshKeys = userSshKeys;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addUserSshKeysItem(UUID userSshKeysItem) {
    if (this.userSshKeys == null) {
      this.userSshKeys = new ArrayList<>();
    }
    this.userSshKeys.add(userSshKeysItem);
    return this;
  }

   /**
   * The UUIDs of users whose SSH keys should be included on the provisioned device.
   * @return userSshKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UUIDs of users whose SSH keys should be included on the provisioned device.")

  public List<UUID> getUserSshKeys() {
    return userSshKeys;
  }


  public void setUserSshKeys(List<UUID> userSshKeys) {
    this.userSshKeys = userSshKeys;
  }


  public InstancesBatchCreateInputBatchesInner userdata(String userdata) {
    
    this.userdata = userdata;
    return this;
  }

   /**
   * Get userdata
   * @return userdata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserdata() {
    return userdata;
  }


  public void setUserdata(String userdata) {
    this.userdata = userdata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public InstancesBatchCreateInputBatchesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesBatchCreateInputBatchesInner instancesBatchCreateInputBatchesInner = (InstancesBatchCreateInputBatchesInner) o;
    return Objects.equals(this.alwaysPxe, instancesBatchCreateInputBatchesInner.alwaysPxe) &&
        Objects.equals(this.billingCycle, instancesBatchCreateInputBatchesInner.billingCycle) &&
        Objects.equals(this.customdata, instancesBatchCreateInputBatchesInner.customdata) &&
        Objects.equals(this.description, instancesBatchCreateInputBatchesInner.description) &&
        Objects.equals(this.facility, instancesBatchCreateInputBatchesInner.facility) &&
        Objects.equals(this.features, instancesBatchCreateInputBatchesInner.features) &&
        Objects.equals(this.hostname, instancesBatchCreateInputBatchesInner.hostname) &&
        Objects.equals(this.hostnames, instancesBatchCreateInputBatchesInner.hostnames) &&
        Objects.equals(this.ipAddresses, instancesBatchCreateInputBatchesInner.ipAddresses) &&
        Objects.equals(this.locked, instancesBatchCreateInputBatchesInner.locked) &&
        Objects.equals(this.metro, instancesBatchCreateInputBatchesInner.metro) &&
        Objects.equals(this.noSshKeys, instancesBatchCreateInputBatchesInner.noSshKeys) &&
        Objects.equals(this.operatingSystem, instancesBatchCreateInputBatchesInner.operatingSystem) &&
        Objects.equals(this.plan, instancesBatchCreateInputBatchesInner.plan) &&
        Objects.equals(this.projectSshKeys, instancesBatchCreateInputBatchesInner.projectSshKeys) &&
        Objects.equals(this.tags, instancesBatchCreateInputBatchesInner.tags) &&
        Objects.equals(this.terminationTime, instancesBatchCreateInputBatchesInner.terminationTime) &&
        Objects.equals(this.userSshKeys, instancesBatchCreateInputBatchesInner.userSshKeys) &&
        Objects.equals(this.userdata, instancesBatchCreateInputBatchesInner.userdata)&&
        Objects.equals(this.additionalProperties, instancesBatchCreateInputBatchesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysPxe, billingCycle, customdata, description, facility, features, hostname, hostnames, ipAddresses, locked, metro, noSshKeys, operatingSystem, plan, projectSshKeys, tags, terminationTime, userSshKeys, userdata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesBatchCreateInputBatchesInner {\n");
    sb.append("    alwaysPxe: ").append(toIndentedString(alwaysPxe)).append("\n");
    sb.append("    billingCycle: ").append(toIndentedString(billingCycle)).append("\n");
    sb.append("    customdata: ").append(toIndentedString(customdata)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    noSshKeys: ").append(toIndentedString(noSshKeys)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    projectSshKeys: ").append(toIndentedString(projectSshKeys)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("    userSshKeys: ").append(toIndentedString(userSshKeys)).append("\n");
    sb.append("    userdata: ").append(toIndentedString(userdata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("always_pxe");
    openapiFields.add("billing_cycle");
    openapiFields.add("customdata");
    openapiFields.add("description");
    openapiFields.add("facility");
    openapiFields.add("features");
    openapiFields.add("hostname");
    openapiFields.add("hostnames");
    openapiFields.add("ip_addresses");
    openapiFields.add("locked");
    openapiFields.add("metro");
    openapiFields.add("no_ssh_keys");
    openapiFields.add("operating_system");
    openapiFields.add("plan");
    openapiFields.add("project_ssh_keys");
    openapiFields.add("tags");
    openapiFields.add("termination_time");
    openapiFields.add("user_ssh_keys");
    openapiFields.add("userdata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstancesBatchCreateInputBatchesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InstancesBatchCreateInputBatchesInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesBatchCreateInputBatchesInner is not found in the empty JSON string", InstancesBatchCreateInputBatchesInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("billing_cycle") != null && !jsonObj.get("billing_cycle").isJsonNull()) && !jsonObj.get("billing_cycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_cycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_cycle").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("facility") != null && !jsonObj.get("facility").isJsonNull()) && !jsonObj.get("facility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facility` to be an array in the JSON string but got `%s`", jsonObj.get("facility").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("hostnames") != null && !jsonObj.get("hostnames").isJsonNull()) && !jsonObj.get("hostnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostnames` to be an array in the JSON string but got `%s`", jsonObj.get("hostnames").toString()));
      }
      if (jsonObj.get("ip_addresses") != null && !jsonObj.get("ip_addresses").isJsonNull()) {
        JsonArray jsonArrayipAddresses = jsonObj.getAsJsonArray("ip_addresses");
        if (jsonArrayipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ip_addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ip_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ip_addresses").toString()));
          }

          // validate the optional field `ip_addresses` (array)
          for (int i = 0; i < jsonArrayipAddresses.size(); i++) {
            InstancesBatchCreateInputBatchesInnerIpAddressesInner.validateJsonObject(jsonArrayipAddresses.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("metro") != null && !jsonObj.get("metro").isJsonNull()) && !jsonObj.get("metro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metro").toString()));
      }
      if ((jsonObj.get("operating_system") != null && !jsonObj.get("operating_system").isJsonNull()) && !jsonObj.get("operating_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operating_system").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("project_ssh_keys") != null && !jsonObj.get("project_ssh_keys").isJsonNull()) && !jsonObj.get("project_ssh_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("project_ssh_keys").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("user_ssh_keys") != null && !jsonObj.get("user_ssh_keys").isJsonNull()) && !jsonObj.get("user_ssh_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("user_ssh_keys").toString()));
      }
      if ((jsonObj.get("userdata") != null && !jsonObj.get("userdata").isJsonNull()) && !jsonObj.get("userdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userdata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesBatchCreateInputBatchesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesBatchCreateInputBatchesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesBatchCreateInputBatchesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesBatchCreateInputBatchesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesBatchCreateInputBatchesInner>() {
           @Override
           public void write(JsonWriter out, InstancesBatchCreateInputBatchesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesBatchCreateInputBatchesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InstancesBatchCreateInputBatchesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstancesBatchCreateInputBatchesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstancesBatchCreateInputBatchesInner
  * @throws IOException if the JSON string is invalid with respect to InstancesBatchCreateInputBatchesInner
  */
  public static InstancesBatchCreateInputBatchesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesBatchCreateInputBatchesInner.class);
  }

 /**
  * Convert an instance of InstancesBatchCreateInputBatchesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

