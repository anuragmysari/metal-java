/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiCallback;
import com.equinix.openapi.ApiClient;
import com.equinix.openapi.ApiException;
import com.equinix.openapi.ApiResponse;
import com.equinix.openapi.Configuration;
import com.equinix.openapi.Pair;
import com.equinix.openapi.ProgressRequestBody;
import com.equinix.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.openapi.metal.v1.model.CapacityCheckPerFacilityList;
import com.equinix.openapi.metal.v1.model.CapacityCheckPerMetroList;
import com.equinix.openapi.metal.v1.model.CapacityInput;
import com.equinix.openapi.metal.v1.model.CapacityList;
import com.equinix.openapi.metal.v1.model.CapacityPerMetroInput;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.MetroCapacityList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CapacityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CapacityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CapacityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkCapacityForFacility
     * @param capacityInput Facility to check capacity in (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCapacityForFacilityCall(CapacityInput capacityInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = capacityInput;

        // create path and map variables
        String localVarPath = "/capacity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCapacityForFacilityValidateBeforeCall(CapacityInput capacityInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'capacityInput' is set
        if (capacityInput == null) {
            throw new ApiException("Missing the required parameter 'capacityInput' when calling checkCapacityForFacility(Async)");
        }

        return checkCapacityForFacilityCall(capacityInput, _callback);

    }

    /**
     * Check capacity
     * Validates if a deploy can be fulfilled.
     * @param capacityInput Facility to check capacity in (required)
     * @return CapacityCheckPerFacilityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public CapacityCheckPerFacilityList checkCapacityForFacility(CapacityInput capacityInput) throws ApiException {
        ApiResponse<CapacityCheckPerFacilityList> localVarResp = checkCapacityForFacilityWithHttpInfo(capacityInput);
        return localVarResp.getData();
    }

    /**
     * Check capacity
     * Validates if a deploy can be fulfilled.
     * @param capacityInput Facility to check capacity in (required)
     * @return ApiResponse&lt;CapacityCheckPerFacilityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CapacityCheckPerFacilityList> checkCapacityForFacilityWithHttpInfo(CapacityInput capacityInput) throws ApiException {
        okhttp3.Call localVarCall = checkCapacityForFacilityValidateBeforeCall(capacityInput, null);
        Type localVarReturnType = new TypeToken<CapacityCheckPerFacilityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check capacity (asynchronously)
     * Validates if a deploy can be fulfilled.
     * @param capacityInput Facility to check capacity in (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCapacityForFacilityAsync(CapacityInput capacityInput, final ApiCallback<CapacityCheckPerFacilityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkCapacityForFacilityValidateBeforeCall(capacityInput, _callback);
        Type localVarReturnType = new TypeToken<CapacityCheckPerFacilityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkCapacityForMetro
     * @param capacityPerMetroInput Metro to check capacity in (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCapacityForMetroCall(CapacityPerMetroInput capacityPerMetroInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = capacityPerMetroInput;

        // create path and map variables
        String localVarPath = "/capacity/metros";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCapacityForMetroValidateBeforeCall(CapacityPerMetroInput capacityPerMetroInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'capacityPerMetroInput' is set
        if (capacityPerMetroInput == null) {
            throw new ApiException("Missing the required parameter 'capacityPerMetroInput' when calling checkCapacityForMetro(Async)");
        }

        return checkCapacityForMetroCall(capacityPerMetroInput, _callback);

    }

    /**
     * Check capacity for a metro
     * Validates if a deploy can be fulfilled in a metro.
     * @param capacityPerMetroInput Metro to check capacity in (required)
     * @return CapacityCheckPerMetroList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public CapacityCheckPerMetroList checkCapacityForMetro(CapacityPerMetroInput capacityPerMetroInput) throws ApiException {
        ApiResponse<CapacityCheckPerMetroList> localVarResp = checkCapacityForMetroWithHttpInfo(capacityPerMetroInput);
        return localVarResp.getData();
    }

    /**
     * Check capacity for a metro
     * Validates if a deploy can be fulfilled in a metro.
     * @param capacityPerMetroInput Metro to check capacity in (required)
     * @return ApiResponse&lt;CapacityCheckPerMetroList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CapacityCheckPerMetroList> checkCapacityForMetroWithHttpInfo(CapacityPerMetroInput capacityPerMetroInput) throws ApiException {
        okhttp3.Call localVarCall = checkCapacityForMetroValidateBeforeCall(capacityPerMetroInput, null);
        Type localVarReturnType = new TypeToken<CapacityCheckPerMetroList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check capacity for a metro (asynchronously)
     * Validates if a deploy can be fulfilled in a metro.
     * @param capacityPerMetroInput Metro to check capacity in (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCapacityForMetroAsync(CapacityPerMetroInput capacityPerMetroInput, final ApiCallback<CapacityCheckPerMetroList> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkCapacityForMetroValidateBeforeCall(capacityPerMetroInput, _callback);
        Type localVarReturnType = new TypeToken<CapacityCheckPerMetroList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findCapacityForFacility
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCapacityForFacilityCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/capacity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCapacityForFacilityValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findCapacityForFacilityCall(_callback);

    }

    /**
     * View capacity
     * Returns a list of facilities and plans with their current capacity.
     * @return CapacityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CapacityList findCapacityForFacility() throws ApiException {
        ApiResponse<CapacityList> localVarResp = findCapacityForFacilityWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View capacity
     * Returns a list of facilities and plans with their current capacity.
     * @return ApiResponse&lt;CapacityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CapacityList> findCapacityForFacilityWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findCapacityForFacilityValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CapacityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View capacity (asynchronously)
     * Returns a list of facilities and plans with their current capacity.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCapacityForFacilityAsync(final ApiCallback<CapacityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCapacityForFacilityValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CapacityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findCapacityForMetro
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCapacityForMetroCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/capacity/metros";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCapacityForMetroValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findCapacityForMetroCall(_callback);

    }

    /**
     * View capacity for metros
     * Returns a list of metros and plans with their current capacity.
     * @return MetroCapacityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public MetroCapacityList findCapacityForMetro() throws ApiException {
        ApiResponse<MetroCapacityList> localVarResp = findCapacityForMetroWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View capacity for metros
     * Returns a list of metros and plans with their current capacity.
     * @return ApiResponse&lt;MetroCapacityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetroCapacityList> findCapacityForMetroWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findCapacityForMetroValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MetroCapacityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View capacity for metros (asynchronously)
     * Returns a list of metros and plans with their current capacity.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCapacityForMetroAsync(final ApiCallback<MetroCapacityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCapacityForMetroValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MetroCapacityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findOrganizationCapacityPerFacility
     * @param id Organization UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findOrganizationCapacityPerFacilityCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{id}/capacity"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findOrganizationCapacityPerFacilityValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findOrganizationCapacityPerFacility(Async)");
        }

        return findOrganizationCapacityPerFacilityCall(id, _callback);

    }

    /**
     * View available hardware plans per Facility for given organization
     * Returns a list of facilities and plans with their current capacity.
     * @param id Organization UUID (required)
     * @return CapacityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CapacityList findOrganizationCapacityPerFacility(UUID id) throws ApiException {
        ApiResponse<CapacityList> localVarResp = findOrganizationCapacityPerFacilityWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * View available hardware plans per Facility for given organization
     * Returns a list of facilities and plans with their current capacity.
     * @param id Organization UUID (required)
     * @return ApiResponse&lt;CapacityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CapacityList> findOrganizationCapacityPerFacilityWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = findOrganizationCapacityPerFacilityValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CapacityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View available hardware plans per Facility for given organization (asynchronously)
     * Returns a list of facilities and plans with their current capacity.
     * @param id Organization UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findOrganizationCapacityPerFacilityAsync(UUID id, final ApiCallback<CapacityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findOrganizationCapacityPerFacilityValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CapacityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findOrganizationCapacityPerMetro
     * @param id Organization UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findOrganizationCapacityPerMetroCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{id}/capacity/metros"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findOrganizationCapacityPerMetroValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findOrganizationCapacityPerMetro(Async)");
        }

        return findOrganizationCapacityPerMetroCall(id, _callback);

    }

    /**
     * View available hardware plans per Metro for given organization
     * Returns a list of metros and plans with their current capacity.
     * @param id Organization UUID (required)
     * @return MetroCapacityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public MetroCapacityList findOrganizationCapacityPerMetro(UUID id) throws ApiException {
        ApiResponse<MetroCapacityList> localVarResp = findOrganizationCapacityPerMetroWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * View available hardware plans per Metro for given organization
     * Returns a list of metros and plans with their current capacity.
     * @param id Organization UUID (required)
     * @return ApiResponse&lt;MetroCapacityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetroCapacityList> findOrganizationCapacityPerMetroWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = findOrganizationCapacityPerMetroValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MetroCapacityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View available hardware plans per Metro for given organization (asynchronously)
     * Returns a list of metros and plans with their current capacity.
     * @param id Organization UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findOrganizationCapacityPerMetroAsync(UUID id, final ApiCallback<MetroCapacityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findOrganizationCapacityPerMetroValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MetroCapacityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
