/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.Href;
import com.equinix.openapi.metal.v1.model.MetalGateway;
import com.equinix.openapi.metal.v1.model.Project;
import com.equinix.openapi.metal.v1.model.VirtualNetwork;
import com.equinix.openapi.metal.v1.model.Vrf;
import com.equinix.openapi.metal.v1.model.VrfIPReservation;
import com.equinix.openapi.metal.v1.model.VrfMetalGateway;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.equinix.openapi.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MetalGatewayListMetalGatewaysInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MetalGatewayListMetalGatewaysInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MetalGatewayListMetalGatewaysInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MetalGatewayListMetalGatewaysInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MetalGateway> adapterMetalGateway = gson.getDelegateAdapter(this, TypeToken.get(MetalGateway.class));
            final TypeAdapter<VrfMetalGateway> adapterVrfMetalGateway = gson.getDelegateAdapter(this, TypeToken.get(VrfMetalGateway.class));

            return (TypeAdapter<T>) new TypeAdapter<MetalGatewayListMetalGatewaysInner>() {
                @Override
                public void write(JsonWriter out, MetalGatewayListMetalGatewaysInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MetalGateway`
                    if (value.getActualInstance() instanceof MetalGateway) {
                        JsonObject obj = adapterMetalGateway.toJsonTree((MetalGateway)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VrfMetalGateway`
                    if (value.getActualInstance() instanceof VrfMetalGateway) {
                        JsonObject obj = adapterVrfMetalGateway.toJsonTree((VrfMetalGateway)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: MetalGateway, VrfMetalGateway");
                }

                @Override
                public MetalGatewayListMetalGatewaysInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize MetalGateway
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetalGateway.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MetalGateway'");
                        MetalGatewayListMetalGatewaysInner ret = new MetalGatewayListMetalGatewaysInner();
                        ret.setActualInstance(adapterMetalGateway.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MetalGateway'", e);
                    }

                    // deserialize VrfMetalGateway
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VrfMetalGateway.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'VrfMetalGateway'");
                        MetalGatewayListMetalGatewaysInner ret = new MetalGatewayListMetalGatewaysInner();
                        ret.setActualInstance(adapterVrfMetalGateway.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'VrfMetalGateway'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for MetalGatewayListMetalGatewaysInner: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public MetalGatewayListMetalGatewaysInner() {
        super("anyOf", Boolean.FALSE);
    }

    public MetalGatewayListMetalGatewaysInner(MetalGateway o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public MetalGatewayListMetalGatewaysInner(VrfMetalGateway o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MetalGateway", new GenericType<MetalGateway>() {
        });
        schemas.put("VrfMetalGateway", new GenericType<VrfMetalGateway>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return MetalGatewayListMetalGatewaysInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * MetalGateway, VrfMetalGateway
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MetalGateway) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VrfMetalGateway) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MetalGateway, VrfMetalGateway");
    }

    /**
     * Get the actual instance, which can be the following:
     * MetalGateway, VrfMetalGateway
     *
     * @return The actual instance (MetalGateway, VrfMetalGateway)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetalGateway`. If the actual instance is not `MetalGateway`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetalGateway`
     * @throws ClassCastException if the instance is not `MetalGateway`
     */
    public MetalGateway getMetalGateway() throws ClassCastException {
        return (MetalGateway)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VrfMetalGateway`. If the actual instance is not `VrfMetalGateway`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VrfMetalGateway`
     * @throws ClassCastException if the instance is not `VrfMetalGateway`
     */
    public VrfMetalGateway getVrfMetalGateway() throws ClassCastException {
        return (VrfMetalGateway)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetalGatewayListMetalGatewaysInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with MetalGateway
    try {
      MetalGateway.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with VrfMetalGateway
    try {
      VrfMetalGateway.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for MetalGatewayListMetalGatewaysInner with anyOf schemas: MetalGateway, VrfMetalGateway. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of MetalGatewayListMetalGatewaysInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetalGatewayListMetalGatewaysInner
  * @throws IOException if the JSON string is invalid with respect to MetalGatewayListMetalGatewaysInner
  */
  public static MetalGatewayListMetalGatewaysInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetalGatewayListMetalGatewaysInner.class);
  }

 /**
  * Convert an instance of MetalGatewayListMetalGatewaysInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

