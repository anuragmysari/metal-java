/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.Href;
import com.equinix.openapi.metal.v1.model.VirtualCircuit;
import com.equinix.openapi.metal.v1.model.Vrf;
import com.equinix.openapi.metal.v1.model.VrfVirtualCircuit;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.equinix.openapi.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateConnectionPortVirtualCircuit201Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateConnectionPortVirtualCircuit201Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateConnectionPortVirtualCircuit201Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateConnectionPortVirtualCircuit201Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<VirtualCircuit> adapterVirtualCircuit = gson.getDelegateAdapter(this, TypeToken.get(VirtualCircuit.class));
            final TypeAdapter<VrfVirtualCircuit> adapterVrfVirtualCircuit = gson.getDelegateAdapter(this, TypeToken.get(VrfVirtualCircuit.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateConnectionPortVirtualCircuit201Response>() {
                @Override
                public void write(JsonWriter out, CreateConnectionPortVirtualCircuit201Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `VirtualCircuit`
                    if (value.getActualInstance() instanceof VirtualCircuit) {
                        JsonObject obj = adapterVirtualCircuit.toJsonTree((VirtualCircuit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VrfVirtualCircuit`
                    if (value.getActualInstance() instanceof VrfVirtualCircuit) {
                        JsonObject obj = adapterVrfVirtualCircuit.toJsonTree((VrfVirtualCircuit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: VirtualCircuit, VrfVirtualCircuit");
                }

                @Override
                public CreateConnectionPortVirtualCircuit201Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize VirtualCircuit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VirtualCircuit.validateJsonObject(jsonObject);
                        actualAdapter = adapterVirtualCircuit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VirtualCircuit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VirtualCircuit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VirtualCircuit'", e);
                    }

                    // deserialize VrfVirtualCircuit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VrfVirtualCircuit.validateJsonObject(jsonObject);
                        actualAdapter = adapterVrfVirtualCircuit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VrfVirtualCircuit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VrfVirtualCircuit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VrfVirtualCircuit'", e);
                    }

                    if (match == 1) {
                        CreateConnectionPortVirtualCircuit201Response ret = new CreateConnectionPortVirtualCircuit201Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateConnectionPortVirtualCircuit201Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public CreateConnectionPortVirtualCircuit201Response() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateConnectionPortVirtualCircuit201Response(VirtualCircuit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateConnectionPortVirtualCircuit201Response(VrfVirtualCircuit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("VirtualCircuit", new GenericType<VirtualCircuit>() {
        });
        schemas.put("VrfVirtualCircuit", new GenericType<VrfVirtualCircuit>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return CreateConnectionPortVirtualCircuit201Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * VirtualCircuit, VrfVirtualCircuit
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof VirtualCircuit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VrfVirtualCircuit) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be VirtualCircuit, VrfVirtualCircuit");
    }

    /**
     * Get the actual instance, which can be the following:
     * VirtualCircuit, VrfVirtualCircuit
     *
     * @return The actual instance (VirtualCircuit, VrfVirtualCircuit)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `VirtualCircuit`. If the actual instance is not `VirtualCircuit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VirtualCircuit`
     * @throws ClassCastException if the instance is not `VirtualCircuit`
     */
    public VirtualCircuit getVirtualCircuit() throws ClassCastException {
        return (VirtualCircuit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VrfVirtualCircuit`. If the actual instance is not `VrfVirtualCircuit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VrfVirtualCircuit`
     * @throws ClassCastException if the instance is not `VrfVirtualCircuit`
     */
    public VrfVirtualCircuit getVrfVirtualCircuit() throws ClassCastException {
        return (VrfVirtualCircuit)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateConnectionPortVirtualCircuit201Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with VirtualCircuit
    try {
      VirtualCircuit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VirtualCircuit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VrfVirtualCircuit
    try {
      VrfVirtualCircuit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VrfVirtualCircuit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CreateConnectionPortVirtualCircuit201Response with oneOf schemas: VirtualCircuit, VrfVirtualCircuit. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of CreateConnectionPortVirtualCircuit201Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateConnectionPortVirtualCircuit201Response
  * @throws IOException if the JSON string is invalid with respect to CreateConnectionPortVirtualCircuit201Response
  */
  public static CreateConnectionPortVirtualCircuit201Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConnectionPortVirtualCircuit201Response.class);
  }

 /**
  * Convert an instance of CreateConnectionPortVirtualCircuit201Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

