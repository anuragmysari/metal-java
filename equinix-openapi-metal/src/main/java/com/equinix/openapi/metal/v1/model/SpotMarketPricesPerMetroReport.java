/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.SpotPricesPerFacility;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * SpotMarketPricesPerMetroReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SpotMarketPricesPerMetroReport {
  public static final String SERIALIZED_NAME_AM = "am";
  @SerializedName(SERIALIZED_NAME_AM)
  private SpotPricesPerFacility am;

  public static final String SERIALIZED_NAME_CH = "ch";
  @SerializedName(SERIALIZED_NAME_CH)
  private SpotPricesPerFacility ch;

  public static final String SERIALIZED_NAME_DA = "da";
  @SerializedName(SERIALIZED_NAME_DA)
  private SpotPricesPerFacility da;

  public static final String SERIALIZED_NAME_LA = "la";
  @SerializedName(SERIALIZED_NAME_LA)
  private SpotPricesPerFacility la;

  public static final String SERIALIZED_NAME_NY = "ny";
  @SerializedName(SERIALIZED_NAME_NY)
  private SpotPricesPerFacility ny;

  public static final String SERIALIZED_NAME_SG = "sg";
  @SerializedName(SERIALIZED_NAME_SG)
  private SpotPricesPerFacility sg;

  public static final String SERIALIZED_NAME_SV = "sv";
  @SerializedName(SERIALIZED_NAME_SV)
  private SpotPricesPerFacility sv;

  public SpotMarketPricesPerMetroReport() {
  }

  public SpotMarketPricesPerMetroReport am(SpotPricesPerFacility am) {
    
    this.am = am;
    return this;
  }

   /**
   * Get am
   * @return am
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getAm() {
    return am;
  }


  public void setAm(SpotPricesPerFacility am) {
    this.am = am;
  }


  public SpotMarketPricesPerMetroReport ch(SpotPricesPerFacility ch) {
    
    this.ch = ch;
    return this;
  }

   /**
   * Get ch
   * @return ch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getCh() {
    return ch;
  }


  public void setCh(SpotPricesPerFacility ch) {
    this.ch = ch;
  }


  public SpotMarketPricesPerMetroReport da(SpotPricesPerFacility da) {
    
    this.da = da;
    return this;
  }

   /**
   * Get da
   * @return da
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getDa() {
    return da;
  }


  public void setDa(SpotPricesPerFacility da) {
    this.da = da;
  }


  public SpotMarketPricesPerMetroReport la(SpotPricesPerFacility la) {
    
    this.la = la;
    return this;
  }

   /**
   * Get la
   * @return la
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getLa() {
    return la;
  }


  public void setLa(SpotPricesPerFacility la) {
    this.la = la;
  }


  public SpotMarketPricesPerMetroReport ny(SpotPricesPerFacility ny) {
    
    this.ny = ny;
    return this;
  }

   /**
   * Get ny
   * @return ny
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getNy() {
    return ny;
  }


  public void setNy(SpotPricesPerFacility ny) {
    this.ny = ny;
  }


  public SpotMarketPricesPerMetroReport sg(SpotPricesPerFacility sg) {
    
    this.sg = sg;
    return this;
  }

   /**
   * Get sg
   * @return sg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getSg() {
    return sg;
  }


  public void setSg(SpotPricesPerFacility sg) {
    this.sg = sg;
  }


  public SpotMarketPricesPerMetroReport sv(SpotPricesPerFacility sv) {
    
    this.sv = sv;
    return this;
  }

   /**
   * Get sv
   * @return sv
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpotPricesPerFacility getSv() {
    return sv;
  }


  public void setSv(SpotPricesPerFacility sv) {
    this.sv = sv;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public SpotMarketPricesPerMetroReport putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpotMarketPricesPerMetroReport spotMarketPricesPerMetroReport = (SpotMarketPricesPerMetroReport) o;
    return Objects.equals(this.am, spotMarketPricesPerMetroReport.am) &&
        Objects.equals(this.ch, spotMarketPricesPerMetroReport.ch) &&
        Objects.equals(this.da, spotMarketPricesPerMetroReport.da) &&
        Objects.equals(this.la, spotMarketPricesPerMetroReport.la) &&
        Objects.equals(this.ny, spotMarketPricesPerMetroReport.ny) &&
        Objects.equals(this.sg, spotMarketPricesPerMetroReport.sg) &&
        Objects.equals(this.sv, spotMarketPricesPerMetroReport.sv)&&
        Objects.equals(this.additionalProperties, spotMarketPricesPerMetroReport.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(am, ch, da, la, ny, sg, sv, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpotMarketPricesPerMetroReport {\n");
    sb.append("    am: ").append(toIndentedString(am)).append("\n");
    sb.append("    ch: ").append(toIndentedString(ch)).append("\n");
    sb.append("    da: ").append(toIndentedString(da)).append("\n");
    sb.append("    la: ").append(toIndentedString(la)).append("\n");
    sb.append("    ny: ").append(toIndentedString(ny)).append("\n");
    sb.append("    sg: ").append(toIndentedString(sg)).append("\n");
    sb.append("    sv: ").append(toIndentedString(sv)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("am");
    openapiFields.add("ch");
    openapiFields.add("da");
    openapiFields.add("la");
    openapiFields.add("ny");
    openapiFields.add("sg");
    openapiFields.add("sv");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SpotMarketPricesPerMetroReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SpotMarketPricesPerMetroReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpotMarketPricesPerMetroReport is not found in the empty JSON string", SpotMarketPricesPerMetroReport.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `am`
      if (jsonObj.get("am") != null && !jsonObj.get("am").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("am"));
      }
      // validate the optional field `ch`
      if (jsonObj.get("ch") != null && !jsonObj.get("ch").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("ch"));
      }
      // validate the optional field `da`
      if (jsonObj.get("da") != null && !jsonObj.get("da").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("da"));
      }
      // validate the optional field `la`
      if (jsonObj.get("la") != null && !jsonObj.get("la").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("la"));
      }
      // validate the optional field `ny`
      if (jsonObj.get("ny") != null && !jsonObj.get("ny").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("ny"));
      }
      // validate the optional field `sg`
      if (jsonObj.get("sg") != null && !jsonObj.get("sg").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("sg"));
      }
      // validate the optional field `sv`
      if (jsonObj.get("sv") != null && !jsonObj.get("sv").isJsonNull()) {
        SpotPricesPerFacility.validateJsonObject(jsonObj.getAsJsonObject("sv"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpotMarketPricesPerMetroReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpotMarketPricesPerMetroReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpotMarketPricesPerMetroReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpotMarketPricesPerMetroReport.class));

       return (TypeAdapter<T>) new TypeAdapter<SpotMarketPricesPerMetroReport>() {
           @Override
           public void write(JsonWriter out, SpotMarketPricesPerMetroReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SpotMarketPricesPerMetroReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SpotMarketPricesPerMetroReport instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SpotMarketPricesPerMetroReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SpotMarketPricesPerMetroReport
  * @throws IOException if the JSON string is invalid with respect to SpotMarketPricesPerMetroReport
  */
  public static SpotMarketPricesPerMetroReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpotMarketPricesPerMetroReport.class);
  }

 /**
  * Convert an instance of SpotMarketPricesPerMetroReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

