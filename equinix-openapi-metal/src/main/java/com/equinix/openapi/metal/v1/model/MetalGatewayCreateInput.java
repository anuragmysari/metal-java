/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * MetalGatewayCreateInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MetalGatewayCreateInput {
  public static final String SERIALIZED_NAME_IP_RESERVATION_ID = "ip_reservation_id";
  @SerializedName(SERIALIZED_NAME_IP_RESERVATION_ID)
  private UUID ipReservationId;

  public static final String SERIALIZED_NAME_PRIVATE_IPV4_SUBNET_SIZE = "private_ipv4_subnet_size";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IPV4_SUBNET_SIZE)
  private Integer privateIpv4SubnetSize;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_ID = "virtual_network_id";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_ID)
  private UUID virtualNetworkId;

  public MetalGatewayCreateInput() {
  }

  public MetalGatewayCreateInput ipReservationId(UUID ipReservationId) {
    
    this.ipReservationId = ipReservationId;
    return this;
  }

   /**
   * The UUID of an IP reservation that belongs to the same project as where the metal gateway will be created in. This field is required unless the private IPv4 subnet size is specified.
   * @return ipReservationId
  **/
  @javax.annotation.Nullable

  public UUID getIpReservationId() {
    return ipReservationId;
  }


  public void setIpReservationId(UUID ipReservationId) {
    this.ipReservationId = ipReservationId;
  }


  public MetalGatewayCreateInput privateIpv4SubnetSize(Integer privateIpv4SubnetSize) {
    
    this.privateIpv4SubnetSize = privateIpv4SubnetSize;
    return this;
  }

   /**
   * The subnet size (8, 16, 32, 64, or 128) of the private IPv4 reservation that will be created for the metal gateway. This field is required unless a project IP reservation was specified.           Please keep in mind that the number of private metal gateway ranges are limited per project. If you would like to increase the limit per project, please contact support for assistance.
   * @return privateIpv4SubnetSize
  **/
  @javax.annotation.Nullable

  public Integer getPrivateIpv4SubnetSize() {
    return privateIpv4SubnetSize;
  }


  public void setPrivateIpv4SubnetSize(Integer privateIpv4SubnetSize) {
    this.privateIpv4SubnetSize = privateIpv4SubnetSize;
  }


  public MetalGatewayCreateInput virtualNetworkId(UUID virtualNetworkId) {
    
    this.virtualNetworkId = virtualNetworkId;
    return this;
  }

   /**
   * The UUID of a metro virtual network that belongs to the same project as where the metal gateway will be created in.
   * @return virtualNetworkId
  **/
  @javax.annotation.Nonnull

  public UUID getVirtualNetworkId() {
    return virtualNetworkId;
  }


  public void setVirtualNetworkId(UUID virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MetalGatewayCreateInput instance itself
   */
  public MetalGatewayCreateInput putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetalGatewayCreateInput metalGatewayCreateInput = (MetalGatewayCreateInput) o;
    return Objects.equals(this.ipReservationId, metalGatewayCreateInput.ipReservationId) &&
        Objects.equals(this.privateIpv4SubnetSize, metalGatewayCreateInput.privateIpv4SubnetSize) &&
        Objects.equals(this.virtualNetworkId, metalGatewayCreateInput.virtualNetworkId)&&
        Objects.equals(this.additionalProperties, metalGatewayCreateInput.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipReservationId, privateIpv4SubnetSize, virtualNetworkId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetalGatewayCreateInput {\n");
    sb.append("    ipReservationId: ").append(toIndentedString(ipReservationId)).append("\n");
    sb.append("    privateIpv4SubnetSize: ").append(toIndentedString(privateIpv4SubnetSize)).append("\n");
    sb.append("    virtualNetworkId: ").append(toIndentedString(virtualNetworkId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ip_reservation_id");
    openapiFields.add("private_ipv4_subnet_size");
    openapiFields.add("virtual_network_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("virtual_network_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetalGatewayCreateInput
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MetalGatewayCreateInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetalGatewayCreateInput is not found in the empty JSON string", MetalGatewayCreateInput.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetalGatewayCreateInput.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ip_reservation_id") != null && !jsonObj.get("ip_reservation_id").isJsonNull()) && !jsonObj.get("ip_reservation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_reservation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_reservation_id").toString()));
      }
      if (!jsonObj.get("virtual_network_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtual_network_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtual_network_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetalGatewayCreateInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetalGatewayCreateInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetalGatewayCreateInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetalGatewayCreateInput.class));

       return (TypeAdapter<T>) new TypeAdapter<MetalGatewayCreateInput>() {
           @Override
           public void write(JsonWriter out, MetalGatewayCreateInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MetalGatewayCreateInput read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MetalGatewayCreateInput instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetalGatewayCreateInput given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetalGatewayCreateInput
  * @throws IOException if the JSON string is invalid with respect to MetalGatewayCreateInput
  */
  public static MetalGatewayCreateInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetalGatewayCreateInput.class);
  }

 /**
  * Convert an instance of MetalGatewayCreateInput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

