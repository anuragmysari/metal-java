/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.MetalGatewayCreateInput;
import com.equinix.openapi.metal.v1.model.VrfMetalGatewayCreateInput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.UUID;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.equinix.openapi.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateMetalGatewayRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateMetalGatewayRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateMetalGatewayRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateMetalGatewayRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MetalGatewayCreateInput> adapterMetalGatewayCreateInput = gson.getDelegateAdapter(this, TypeToken.get(MetalGatewayCreateInput.class));
            final TypeAdapter<VrfMetalGatewayCreateInput> adapterVrfMetalGatewayCreateInput = gson.getDelegateAdapter(this, TypeToken.get(VrfMetalGatewayCreateInput.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateMetalGatewayRequest>() {
                @Override
                public void write(JsonWriter out, CreateMetalGatewayRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MetalGatewayCreateInput`
                    if (value.getActualInstance() instanceof MetalGatewayCreateInput) {
                        JsonObject obj = adapterMetalGatewayCreateInput.toJsonTree((MetalGatewayCreateInput)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VrfMetalGatewayCreateInput`
                    if (value.getActualInstance() instanceof VrfMetalGatewayCreateInput) {
                        JsonObject obj = adapterVrfMetalGatewayCreateInput.toJsonTree((VrfMetalGatewayCreateInput)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: MetalGatewayCreateInput, VrfMetalGatewayCreateInput");
                }

                @Override
                public CreateMetalGatewayRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize MetalGatewayCreateInput
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetalGatewayCreateInput.validateJsonObject(jsonObject);
                        actualAdapter = adapterMetalGatewayCreateInput;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MetalGatewayCreateInput'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MetalGatewayCreateInput failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MetalGatewayCreateInput'", e);
                    }

                    // deserialize VrfMetalGatewayCreateInput
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VrfMetalGatewayCreateInput.validateJsonObject(jsonObject);
                        actualAdapter = adapterVrfMetalGatewayCreateInput;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VrfMetalGatewayCreateInput'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VrfMetalGatewayCreateInput failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VrfMetalGatewayCreateInput'", e);
                    }

                    if (match == 1) {
                        CreateMetalGatewayRequest ret = new CreateMetalGatewayRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateMetalGatewayRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public CreateMetalGatewayRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateMetalGatewayRequest(MetalGatewayCreateInput o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateMetalGatewayRequest(VrfMetalGatewayCreateInput o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MetalGatewayCreateInput", new GenericType<MetalGatewayCreateInput>() {
        });
        schemas.put("VrfMetalGatewayCreateInput", new GenericType<VrfMetalGatewayCreateInput>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return CreateMetalGatewayRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * MetalGatewayCreateInput, VrfMetalGatewayCreateInput
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MetalGatewayCreateInput) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VrfMetalGatewayCreateInput) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MetalGatewayCreateInput, VrfMetalGatewayCreateInput");
    }

    /**
     * Get the actual instance, which can be the following:
     * MetalGatewayCreateInput, VrfMetalGatewayCreateInput
     *
     * @return The actual instance (MetalGatewayCreateInput, VrfMetalGatewayCreateInput)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetalGatewayCreateInput`. If the actual instance is not `MetalGatewayCreateInput`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetalGatewayCreateInput`
     * @throws ClassCastException if the instance is not `MetalGatewayCreateInput`
     */
    public MetalGatewayCreateInput getMetalGatewayCreateInput() throws ClassCastException {
        return (MetalGatewayCreateInput)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VrfMetalGatewayCreateInput`. If the actual instance is not `VrfMetalGatewayCreateInput`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VrfMetalGatewayCreateInput`
     * @throws ClassCastException if the instance is not `VrfMetalGatewayCreateInput`
     */
    public VrfMetalGatewayCreateInput getVrfMetalGatewayCreateInput() throws ClassCastException {
        return (VrfMetalGatewayCreateInput)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateMetalGatewayRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with MetalGatewayCreateInput
    try {
      MetalGatewayCreateInput.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MetalGatewayCreateInput failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VrfMetalGatewayCreateInput
    try {
      VrfMetalGatewayCreateInput.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VrfMetalGatewayCreateInput failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CreateMetalGatewayRequest with oneOf schemas: MetalGatewayCreateInput, VrfMetalGatewayCreateInput. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of CreateMetalGatewayRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateMetalGatewayRequest
  * @throws IOException if the JSON string is invalid with respect to CreateMetalGatewayRequest
  */
  public static CreateMetalGatewayRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMetalGatewayRequest.class);
  }

 /**
  * Convert an instance of CreateMetalGatewayRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

