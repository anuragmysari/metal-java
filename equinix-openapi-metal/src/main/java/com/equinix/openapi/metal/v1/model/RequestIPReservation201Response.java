/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.Href;
import com.equinix.openapi.metal.v1.model.IPAssignment;
import com.equinix.openapi.metal.v1.model.IPReservation;
import com.equinix.openapi.metal.v1.model.IPReservationFacility;
import com.equinix.openapi.metal.v1.model.IPReservationMetro;
import com.equinix.openapi.metal.v1.model.MetalGatewayLite;
import com.equinix.openapi.metal.v1.model.Project;
import com.equinix.openapi.metal.v1.model.User;
import com.equinix.openapi.metal.v1.model.Vrf;
import com.equinix.openapi.metal.v1.model.VrfIpReservation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.equinix.openapi.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RequestIPReservation201Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RequestIPReservation201Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RequestIPReservation201Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RequestIPReservation201Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IPReservation> adapterIPReservation = gson.getDelegateAdapter(this, TypeToken.get(IPReservation.class));
            final TypeAdapter<VrfIpReservation> adapterVrfIpReservation = gson.getDelegateAdapter(this, TypeToken.get(VrfIpReservation.class));

            return (TypeAdapter<T>) new TypeAdapter<RequestIPReservation201Response>() {
                @Override
                public void write(JsonWriter out, RequestIPReservation201Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `IPReservation`
                    if (value.getActualInstance() instanceof IPReservation) {
                        JsonObject obj = adapterIPReservation.toJsonTree((IPReservation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VrfIpReservation`
                    if (value.getActualInstance() instanceof VrfIpReservation) {
                        JsonObject obj = adapterVrfIpReservation.toJsonTree((VrfIpReservation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: IPReservation, VrfIpReservation");
                }

                @Override
                public RequestIPReservation201Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize IPReservation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IPReservation.validateJsonObject(jsonObject);
                        actualAdapter = adapterIPReservation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IPReservation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IPReservation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IPReservation'", e);
                    }

                    // deserialize VrfIpReservation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VrfIpReservation.validateJsonObject(jsonObject);
                        actualAdapter = adapterVrfIpReservation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VrfIpReservation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VrfIpReservation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VrfIpReservation'", e);
                    }

                    if (match == 1) {
                        RequestIPReservation201Response ret = new RequestIPReservation201Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RequestIPReservation201Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public RequestIPReservation201Response() {
        super("oneOf", Boolean.FALSE);
    }

    public RequestIPReservation201Response(IPReservation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RequestIPReservation201Response(VrfIpReservation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("IPReservation", new GenericType<IPReservation>() {
        });
        schemas.put("VrfIpReservation", new GenericType<VrfIpReservation>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return RequestIPReservation201Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * IPReservation, VrfIpReservation
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof IPReservation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VrfIpReservation) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be IPReservation, VrfIpReservation");
    }

    /**
     * Get the actual instance, which can be the following:
     * IPReservation, VrfIpReservation
     *
     * @return The actual instance (IPReservation, VrfIpReservation)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `IPReservation`. If the actual instance is not `IPReservation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IPReservation`
     * @throws ClassCastException if the instance is not `IPReservation`
     */
    public IPReservation getIPReservation() throws ClassCastException {
        return (IPReservation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VrfIpReservation`. If the actual instance is not `VrfIpReservation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VrfIpReservation`
     * @throws ClassCastException if the instance is not `VrfIpReservation`
     */
    public VrfIpReservation getVrfIpReservation() throws ClassCastException {
        return (VrfIpReservation)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RequestIPReservation201Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with IPReservation
    try {
      IPReservation.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IPReservation failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VrfIpReservation
    try {
      VrfIpReservation.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VrfIpReservation failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for RequestIPReservation201Response with oneOf schemas: IPReservation, VrfIpReservation. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of RequestIPReservation201Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequestIPReservation201Response
  * @throws IOException if the JSON string is invalid with respect to RequestIPReservation201Response
  */
  public static RequestIPReservation201Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestIPReservation201Response.class);
  }

 /**
  * Convert an instance of RequestIPReservation201Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

