/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.CreateVrfRequest;
import com.equinix.openapi.metal.v1.model.Error;
import java.util.UUID;
import com.equinix.openapi.metal.v1.model.Vrf;
import com.equinix.openapi.metal.v1.model.VrfIPReservationList;
import com.equinix.openapi.metal.v1.model.VrfList;
import com.equinix.openapi.metal.v1.model.VrfUpdateInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VrfsApi
 */
@Disabled
public class VrfsApiTest {

    private final VrfsApi api = new VrfsApi();

    /**
     * Create a new VRF in the specified project
     *
     * Creates a new VRF in the specified project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVrfTest() throws ApiException {
        UUID id = null;
        CreateVrfRequest createVrfRequest = null;
        Vrf response = api.createVrf(id, createVrfRequest);
        // TODO: test validations
    }

    /**
     * Delete the VRF
     *
     * Deletes the VRF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVrfTest() throws ApiException {
        UUID id = null;
        api.deleteVrf(id);
        // TODO: test validations
    }

    /**
     * Retrieve a VRF
     *
     * Returns a single VRF resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findVrfByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Vrf response = api.findVrfById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve all VRF IP Reservations in the VRF
     *
     * Returns the list of VRF IP Reservations for the VRF.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findVrfIPReservationsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        VrfIPReservationList response = api.findVrfIPReservations(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve all VRFs in the project
     *
     * Returns the list of VRFs for a single project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findVrfsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        String metro = null;
        VrfList response = api.findVrfs(id, include, exclude, metro);
        // TODO: test validations
    }

    /**
     * Update the VRF
     *
     * Updates the VRF.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVrfTest() throws ApiException {
        UUID id = null;
        VrfUpdateInput vrfUpdateInput = null;
        Vrf response = api.updateVrf(id, vrfUpdateInput);
        // TODO: test validations
    }

}
